apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: sed.edit.NAME
  title:  sed.edit.TITLE
  description: sed.edit.DESCRIPTION
  tags: sed.edit.APPTAGS
spec:
  type: service
  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Application Information
      required:
        - name
        - owner
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
          ui:field: EntityNamePicker
          maxLength: 63
        owner:
          title: Owner
          type: string
          description: Owner of the component
          default: user:guest
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group, User]
    - title: Application Repository Information
      required:
        - hostType
        - repoName
        - branch
      properties:
        hostType:
          title: Host Type
          type: string
          enum:
            - GitHub
            - GitLab
            - Bitbucket
          default: GitHub
        repoName:
          title: Repository Name
          type: string
        branch:
          title: Repository Default Branch
          type: string
          default: main
      dependencies:
        hostType:
          oneOf:
            - required:
                - ghHost
                - ciType
                - ghOwner
                - hostType
              properties:
                hostType:
                  const: GitHub
                ghOwner:
                  title: Repository Owner
                  type: string
                  ui:help: The organization, user or project that this repo will belong to
                  ${DEFAULT_ORG_FOR_GITHUB}
                ghHost:
                  title: Repository Server
                  type: string
                  default: ${GITHUB__DEFAULT__HOST}
                  ui:help: "You can also provide the on-prem github server, example: github-github.apps.cluster-ljg9z.sandbox219.opentlc.com"
                ciType:
                  title: CI Provider
                  type: string
                  default: tekton
                  enum:
                    - tekton
                    - jenkins
                    - azure
                    - githubactions
                  enumNames:
                    - Tekton (SLSA 3)
                    - Jenkins (SLSA 2)
                    - Azure Pipelines (SLSA 2)
                    - Github Actions (SLSA 2)
              dependencies:
                ciType:
                  oneOf:
                    - properties:
                        ciType:
                          const: tekton
                    - properties:
                        ciType:
                          const: jenkins
                    - required: 
                        - azureProject
                        - ciType
                      properties:
                        ciType:
                          const: azure
                        azureProject:
                          title: Azure Project
                          type: string
                          ui:help: The project to run the pipelines under
                    - properties:
                        ciType:
                          const: githubactions
            - required:
                - glHost
                - ciType
                - glOwner
                - hostType
              properties:
                hostType:
                    const: GitLab
                glOwner:
                  title: Repository Owner
                  type: string
                  ui:help: The organization, user or project that this repo will belong to
                  ${DEFAULT_ORG_FOR_GITLAB}
                glHost:
                  title: Repository Server
                  type: string
                  default: ${GITLAB__DEFAULT__HOST}
                  ui:help: "You can also provide the on-prem gitlab server, example: gitlab-gitlab.apps.cluster-ljg9z.sandbox219.opentlc.com"
                ciType:
                  title: CI Provider
                  type: string
                  default: gitlabci
                  enum:
                    - tekton
                    - jenkins
                    - gitlabci
                  enumNames:
                    - Tekton (SLSA 3)
                    - Jenkins (SLSA 2)
                    - Gitlab CI (SLSA 2)
            - required:
                - bbHost
                - ciType
                - bbOwner
                - hostType
                - workspace
                - project
              properties:
                hostType:
                    const: Bitbucket
                bbOwner:
                  title: Repository Owner
                  type: string
                  ui:help: The organization, user or project that this repo will belong to
                  ${DEFAULT_ORG_FOR_BITBUCKET}
                bbHost:
                  title: Repository Server
                  type: string
                  default: ${BITBUCKET__DEFAULT__HOST}
                  ui:help: "Bitbucket Cloud Default"
                workspace:
                  title: Workspace
                  type: string
                  ui:help: "Bitbucket Workspace"
                project:
                  title: Project
                  type: string
                  ui:help: "Bitbucket Project"
                ciType:
                  title: CI Provider
                  type: string
                  default: tekton
                  enum:
                    - tekton
                    - jenkins
                    - azure
                  enumNames:
                    - Tekton (SLSA 3)
                    - Jenkins (SLSA 2)
                    - Azure Pipelines (SLSA 2)
              dependencies:
                ciType:
                  oneOf:
                    - properties:
                        ciType:
                          const: tekton
                    - properties:
                        ciType:
                          const: jenkins
                    - required: 
                        - azureProject
                        - ciType
                      properties:
                        ciType:
                          const: azure
                        azureProject:
                          title: Azure Project
                          type: string
                          ui:help: The project to run the pipelines under
    - title: Deployment information
      required:
        - imageRegistry
        - imageOrg
        - imageName
        - namespace
      properties:
        imageRegistry:
          title: Image Registry
          type: string
          description: The image registry host
          default: ${QUAY__DEFAULT__HOST}
          ui:autofocus: true
          ui:help: "You can also provide the on-prem registry host, example: quay-tv2pb.apps.cluster-tv2pb.sandbox1194.opentlc.com"
        imageOrg:
          title: Image Organization
          type: string
          description: The organization, user or project that this repo will belong to
          ${DEFAULT_ORG_FOR_QUAY}
        imageName:
          title: Image Name
          type: string
          ui:options:
            rows: 5
        namespace:
          title: Deployment Namespace
          type: string
          default: ${DEFAULT__DEPLOYMENT__NAMESPACE__PREFIX}
          ui:options:
            rows: 5
          ui:help: "This will be the prefix of the following three namespaces for deployment: <namespace>-development, <namespace>-stage, <namespace>-prod"
  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the workspace.

    #
    # Create gitops repository
    #

    # Get gitops source code.
    - id: fetch-gitops-skeleton
      name: Fetch Gitops Skeleton
      action: fetch:template
      input:
        url: ../../skeleton/gitops-template
        targetPath: gitops
        values:
          name: ${{ parameters.name }}
          appName: ${{ parameters.name }}-gitops # for now just use the component name, since it's single component app
          description: This is GitOps manifest for ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          rhtapNamespace: ${RHTAP__DEFAULT__NAMESPACE}
          defaultDeployNamespace: ${DEFAULT__DEPLOYMENT__NAMESPACE__PREFIX}
          # example: github.com?owner=<owner>&repo=<srcRepo>, the gitops repo name will be <srcRepo>-gitops
          repoURL: https://${{ parameters.ghHost if parameters.hostType === 'GitHub' else (parameters.glHost if parameters.hostType === 'GitLab' else parameters.bbHost)}}/${{ parameters.workspace if parameters.hostType === 'Bitbucket' else (parameters.ghOwner if parameters.hostType === 'GitHub' else parameters.glOwner)  }}/${{ parameters.repoName }}-gitops
          srcRepoURL: https://${{ parameters.ghHost if parameters.hostType === 'GitHub' else (parameters.glHost if parameters.hostType === 'GitLab' else parameters.bbHost)}}/${{ parameters.workspace if parameters.hostType === 'Bitbucket' else (parameters.ghOwner if parameters.hostType === 'GitHub' else parameters.glOwner)  }}/${{ parameters.repoName }}
          argoComponent: './components/${{ parameters.name }}/overlays/development'
          argoComponentOverlays: './components/${{ parameters.name }}/overlays'
          owner: ${{ parameters.owner }}
          image: quay.io/redhat-appstudio/dance-bootstrap-app:latest # bootstrap app image as placeholder
          # actual src image will be updated by the CI pipeline.
          srcImage: '${{ parameters.imageRegistry }}/${{ parameters.imageOrg }}/${{ parameters.imageName }}'
          port: sed.edit.IMAGEPORT
          argoNS: ${ARGOCD__DEFAULT__NAMESPACE}
          argoProject: ${ARGOCD__DEFAULT__PROJECT}
          ciType: ${{ parameters.ciType }}
          gitRepoOwner: ${{ parameters.workspace if parameters.hostType === 'Bitbucket' else (parameters.ghOwner if parameters.hostType === 'GitHub' else parameters.glOwner)  }}
          gitRepoName: ${{ parameters.repoName }}-gitops
          azureProject: ${{ parameters.azureProject if parameters.ciType === 'azure' else '' }}
          hostType: ${{ parameters.hostType }}
          username: ${{ parameters.bbOwner }}
          secretRef: ${{ parameters.hostType != 'GitHub' }}
          isTekton: ${{ parameters.ciType === 'tekton' }}
          isJenkins: ${{ parameters.ciType === 'jenkins' }}
          gitSecret: ${{ 'gitops-auth-secret' if parameters.hostType === 'GitHub' else ('gitlab-auth-secret' if parameters.hostType === 'GitLab' else 'bitbucket-auth-secret')}}
          gitSecretKey: ${GIT__SECRET__DEFAULT__KEY}
          webhookSecret: ${WEBHOOK__SECRET__DEFAULT__NAME}
          webhookSecretKey: ${WEBHOOK__SECRET__DEFAULT__KEY}
          defaultBranch: ${{ parameters.branch }}

    # Fetch CI which will be in a folder ci/gitops/type
    - id: fetch-gitops-ci-skeleton
      name: Fetch Gitops CI
      action: fetch:template
      input:
        url: ../../skeleton/ci/gitops-template/${{ parameters.ciType}}
        copyWithoutRender:
          - .github/workflows/*
        targetPath: gitops
        values:
          name: ${{ parameters.name }}
          appName: ${{ parameters.name }}-gitops # for now just use the component name, since it's single component app
          description: This is GitOps manifest for ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          rhtapNamespace: ${RHTAP__DEFAULT__NAMESPACE}
          defaultDeployNamespace: ${DEFAULT__DEPLOYMENT__NAMESPACE__PREFIX}
          # example: github.com?owner=<owner>&repo=<srcRepo>, the gitops repo name will be <srcRepo>-gitops
          repoURL: https://${{ parameters.ghHost if parameters.hostType === 'GitHub' else (parameters.glHost if parameters.hostType === 'GitLab' else parameters.bbHost)}}/${{ parameters.workspace if parameters.hostType === 'Bitbucket' else (parameters.ghOwner if parameters.hostType === 'GitHub' else parameters.glOwner)  }}/${{ parameters.repoName }}-gitops
          srcRepoURL: https://${{ parameters.ghHost if parameters.hostType === 'GitHub' else (parameters.glHost if parameters.hostType === 'GitLab' else parameters.bbHost)}}/${{ parameters.workspace if parameters.hostType === 'Bitbucket' else (parameters.ghOwner if parameters.hostType === 'GitHub' else parameters.glOwner)  }}/${{ parameters.repoName }}
          argoComponent: './components/${{ parameters.name }}/overlays/development'
          argoComponentOverlays: './components/${{ parameters.name }}/overlays'
          owner: ${{ parameters.owner }}
          image: quay.io/redhat-appstudio/dance-bootstrap-app:latest # bootstrap app image as placeholder
          # actual src image will be updated by the CI pipeline.
          srcImage: '${{ parameters.imageRegistry }}/${{ parameters.imageOrg }}/${{ parameters.imageName }}'
          port: sed.edit.IMAGEPORT
          argoNS: ${ARGOCD__DEFAULT__NAMESPACE}
          argoProject: ${ARGOCD__DEFAULT__PROJECT}
          hostType: ${{ parameters.hostType }}
          username: ${{ parameters.bbOwner }}
          secretRef: ${{ parameters.hostType != 'GitHub' }}
          isTekton: ${{ parameters.ciType === 'tekton' }}
          isJenkins: ${{ parameters.ciType === 'jenkins' }}
          gitSecret: ${{ 'gitops-auth-secret' if parameters.hostType === 'GitHub' else ('gitlab-auth-secret' if parameters.hostType === 'GitLab' else 'bitbucket-auth-secret')}}
          gitSecretKey: ${GIT__SECRET__DEFAULT__KEY}
          webhookSecret: ${WEBHOOK__SECRET__DEFAULT__NAME}
          webhookSecretKey: ${WEBHOOK__SECRET__DEFAULT__KEY}
          defaultBranch: ${{ parameters.branch }}
    - action: fs:rename
      id: renameComponentDir
      name: Rename Component Directory
      input:
        files:
          - from: gitops/components/http
            to: gitops/components/${{ parameters.name }}
            overwrite: true

    #
    # Publish gitops repository
    #

    # This action creates a new GitHub repository and publishes the files in the workspace directory to the repository.
    - id: publish-github-gitops
      name: Publish GitOps Repository to Github
      action: publish:github
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        sourcePath: gitops
        allowedHosts: ['${{ parameters.ghHost }}']
        description: This is GitOps repository for ${{ parameters.name }}
        repoUrl:  ${{ parameters.ghHost }}?owner=${{ parameters.ghOwner }}&repo=${{ parameters.repoName }}-gitops
        defaultBranch: ${{ parameters.branch }}
        protectDefaultBranch: false
        repoVisibility: "public"
    # This action creates a new GitLab repository and publishes the files in the workspace directory to the repository.
    - id: publish-gitlab-gitops
      name: Publish GitOps Repository to GitLab
      action: publish:gitlab
      if: ${{ parameters.hostType === 'GitLab' }}
      input:
        sourcePath: gitops
        allowedHosts: ['${{ parameters.glHost }}']
        description: This is GitOps repository for ${{ parameters.name }}
        repoUrl:  ${{ parameters.glHost }}?owner=${{ parameters.glOwner }}&repo=${{ parameters.repoName }}-gitops
        defaultBranch: ${{ parameters.branch }}
        protectDefaultBranch: false
        repoVisibility: "public"
    # This action creates a new Bitbucket repository and publishes the files in the workspace directory to the repository.
    - id: publish-bitbucket-gitops
      name: Publish Gitops Repository to Bitbucket
      action: publish:bitbucketCloud
      if: ${{ parameters.hostType === 'Bitbucket' }}
      input:
        sourcePath: gitops
        allowedHosts: ['${{ parameters.bbHost }}']
        description: This is GitOps repository for ${{ parameters.name }}
        repoUrl:  ${{ parameters.bbHost }}?owner=${{ parameters.bbOwner }}&repo=${{ parameters.repoName }}-gitops&project=${{ parameters.project }}&workspace=${{ parameters.workspace }}
        defaultBranch: ${{ parameters.branch }}
        protectDefaultBranch: false
        repoVisibility: "public"
    # The git service may not serve the new repository immediately.
    - id: wait-for-repository
      name: Waiting for Repository Availability
      action: 'debug:wait'
      input:
        seconds: 3
    # Register repository in ArgoCD
    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.name }}-app-of-apps
        # name set in rhdh config
        argoInstance: ${ARGOCD__DEFAULT__INSTANCE}
        namespace: ${ARGOCD__DEFAULT__NAMESPACE}
        repoUrl: https://${{ parameters.ghHost if parameters.hostType === 'GitHub' else (parameters.glHost if parameters.hostType === 'GitLab' else parameters.bbHost)}}/${{ parameters.workspace if parameters.hostType === 'Bitbucket' else (parameters.ghOwner if parameters.hostType === 'GitHub' else parameters.glOwner)  }}/${{ parameters.repoName }}-gitops.git
        path: './app-of-apps'
    # The wait for Repository CRs to be created, so the creation of the source repository triggers the first build.
    - id: wait-for-sync
      name: Waiting for ArgoCD Sync
      action: 'debug:wait'
      if: ${{ parameters.ciType === 'tekton' }}
      input:
        seconds: 15

    #
    # Create source repository
    #

    # Get the sample source code
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        targetPath: source
        url: ./content
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          repoURL: https://${{ parameters.ghHost if parameters.hostType === 'GitHub' else (parameters.glHost if parameters.hostType === 'GitLab' else parameters.bbHost)}}/${{ parameters.workspace if parameters.hostType === 'Bitbucket' else (parameters.ghOwner if parameters.hostType === 'GitHub' else parameters.glOwner)  }}/${{ parameters.repoName }}-gitops
          srcRepoURL: https://${{ parameters.ghHost if parameters.hostType === 'GitHub' else (parameters.glHost if parameters.hostType === 'GitLab' else parameters.bbHost)}}/${{ parameters.workspace if parameters.hostType === 'Bitbucket' else (parameters.ghOwner if parameters.hostType === 'GitHub' else parameters.glOwner)  }}/${{ parameters.repoName }}
    # Renders all the template variables into the files and directory names and content, and places the result in the workspace.
    - id: fetch-source-skeleton
      name: Fetch Source Skeleton
      action: fetch:template
      input:
        targetPath: source
        url: ../../skeleton/source-repo
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          description: sed.edit.CATALOG_DESCRIPTION
          dockerfile: sed.edit.DOCKERFILE
          buildContext: sed.edit.BUILDCONTEXT
          gitopsSecretName: ${{ 'gitops-auth-secret' if parameters.hostType === 'GitHub' else ('gitlab-auth-secret' if parameters.hostType === 'GitLab' else 'bitbucket-auth-secret')}}
          image: '${{ parameters.imageRegistry }}/${{ parameters.imageOrg }}/${{ parameters.imageName }}'
          imageName: ${{ parameters.imageName }}
          tags: 'sed.edit.APPTAGS'
          repoURL: https://${{ parameters.ghHost if parameters.hostType === 'GitHub' else (parameters.glHost if parameters.hostType === 'GitLab' else parameters.bbHost)}}/${{ parameters.workspace if parameters.hostType === 'Bitbucket' else (parameters.ghOwner if parameters.hostType === 'GitHub' else parameters.glOwner)  }}/${{ parameters.repoName }}-gitops
          hostType: ${{ parameters.hostType }}
          ciType: ${{ parameters.ciType }}
          gitRepoOwner: ${{ parameters.workspace if parameters.hostType === 'Bitbucket' else (parameters.ghOwner if parameters.hostType === 'GitHub' else parameters.glOwner)  }}
          gitRepoName: ${{ parameters.repoName }}
          azureProject: ${{ parameters.azureProject if parameters.ciType === 'azure' else '' }}
          owner: ${{ parameters.owner }}
          repoSlug: '${{ parameters.imageOrg }}/${{ parameters.imageName }}'
          defaultBranch: ${{ parameters.branch }}
          isTekton: ${{ parameters.ciType === 'tekton' }}
          isJenkins: ${{ parameters.ciType === 'jenkins' }}
    - id: fetch-source-ci-skeleton
      name: Fetch Source CI
      action: fetch:template
      input:
        targetPath: source
        url: ../../skeleton/ci/source-repo/${{ parameters.ciType}}
        copyWithoutRender:
          - .github/workflows/*
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          description: sed.edit.CATALOG_DESCRIPTION
          dockerfile: sed.edit.DOCKERFILE
          buildContext: sed.edit.BUILDCONTEXT
          gitopsSecretName: ${{ 'gitops-auth-secret' if parameters.hostType === 'GitHub' else ('gitlab-auth-secret' if parameters.hostType === 'GitLab' else 'bitbucket-auth-secret')}}
          image: '${{ parameters.imageRegistry }}/${{ parameters.imageOrg }}/${{ parameters.imageName }}'
          tags: 'sed.edit.APPTAGS'
          repoURL: https://${{ parameters.ghHost if parameters.hostType === 'GitHub' else (parameters.glHost if parameters.hostType === 'GitLab' else parameters.bbHost)}}/${{ parameters.workspace if parameters.hostType === 'Bitbucket' else (parameters.ghOwner if parameters.hostType === 'GitHub' else parameters.glOwner)  }}/${{ parameters.repoName }}-gitops
          owner: ${{ parameters.owner }}
          repoSlug: '${{ parameters.imageOrg }}/${{ parameters.imageName }}'
          defaultBranch: ${{ parameters.branch }}

    #
    # Publish source repository
    #

    # This action creates a new GitHub repository and publishes the files in the workspace directory to the repository.
    - id: publish-github-source
      name: Publish Repository to GitHub
      action: publish:github
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        allowedHosts: [ '${{ parameters.ghHost}}' ]
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.ghHost }}?owner=${{ parameters.ghOwner }}&repo=${{ parameters.repoName }}
        defaultBranch: ${{ parameters.branch }}
        protectDefaultBranch: false
        repoVisibility: "public"
        sourcePath: source
    # This action creates a new GitLab repository and publishes the files in the workspace directory to the repository.
    - id: publish-gitlab-source
      name: Publish Repository to GitLab
      action: publish:gitlab
      if: ${{ parameters.hostType === 'GitLab' }}
      input:
        allowedHosts: [ '${{ parameters.glHost }}' ]
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.glHost }}?owner=${{ parameters.glOwner }}&repo=${{ parameters.repoName }}
        defaultBranch: ${{ parameters.branch }}
        protectDefaultBranch: false
        repoVisibility: "public"
        sourcePath: source
    # This action creates a new Bitbucket Cloud repository and publishes the files in the workspace directory to the repository.
    - id: publish-bitbucket-source
      name: Publish Repository to Bitbucket
      action: publish:bitbucketCloud
      if: ${{ parameters.hostType === 'Bitbucket' }}
      input:
        allowedHosts: [ '${{ parameters.bbHost }}' ]
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.bbHost }}?owner=${{ parameters.bbOwner }}&repo=${{ parameters.repoName }}&project=${{ parameters.project }}&workspace=${{ parameters.workspace }}
        defaultBranch: ${{ parameters.branch }}
        protectDefaultBranch: false
        repoVisibility: "public"
        sourcePath: source

    #
    # Register objects in Backstage
    #

    - id: register-source
      name: Register Source
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-github-source'].output.repoContentsUrl if steps['publish-github-source'].output else (steps['publish-gitlab-source'].output.repoContentsUrl  if steps['publish-gitlab-source'].output else steps['publish-bitbucket-source'].output.repoContentsUrl) }}
        catalogInfoPath: '/catalog-info.yaml'
    - id: register-gitops
      name: Register Gitops
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-github-gitops'].output.repoContentsUrl if steps['publish-github-gitops'].output else (steps['publish-gitlab-gitops'].output.repoContentsUrl  if steps['publish-gitlab-gitops'].output else steps['publish-bitbucket-gitops'].output.repoContentsUrl) }}
        catalogInfoPath: '/catalog-info.yaml'

  #
  # Finally
  #

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Source Repository
        url: ${{ steps['publish-github-source'].output.remoteUrl if steps['publish-github-source'].output else (steps['publish-gitlab-source'].output.remoteUrl  if steps['publish-gitlab-source'].output else steps['publish-bitbucket-source'].output.repoContentsUrl) }}
      - title: GitOps Repository
        url: ${{ steps['publish-github-gitops'].output.remoteUrl if steps['publish-github-gitops'].output else (steps['publish-gitlab-gitops'].output.remoteUrl  if steps['publish-gitlab-gitops'].output else steps['publish-bitbucket-gitops'].output.repoContentsUrl) }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps['register-source'].output.entityRef }}
      - title: Open GitOps Resource in catalog
        icon: catalog
        entityRef: ${{ steps['register-gitops'].output.entityRef }}
