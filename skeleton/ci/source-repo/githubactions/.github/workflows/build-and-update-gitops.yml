# Generated from templates/source-repo/build-and-update-gitops.yml.njk. Do not edit directly.

# 💁 The Gitops Starter workflow will:
# - Checkout your repository
# - Perform a TSSC container image build
# - Push the built image to the users provided registry
# - Update the deployment yaml

name: TSSC-Build-Attest-Scan-Deploy
env:
  CI_TYPE: github

  # 🖊️ EDIT to change the image registry settings.

  # Vars
  ROX_CENTRAL_ENDPOINT: ${{ vars.ROX_CENTRAL_ENDPOINT }}
  # GITOPS_AUTH_USERNAME: ${{ vars.GITOPS_AUTH_USERNAME }}
  # Set this to the user for your specific registry
  IMAGE_REGISTRY_USER: ${{ vars.IMAGE_REGISTRY_USER }}
  # Set this only when using an external Rekor instance
  REKOR_HOST: ${{ vars.REKOR_HOST }}
  # Set this only when using an external TUF instance
  TUF_MIRROR: ${{ vars.TUF_MIRROR }}
  # QUAY_IO_CREDS_USR: ${{ vars.QUAY_IO_CREDS_USR }}
  # ARTIFACTORY_IO_CREDS_USR: ${{ vars.ARTIFACTORY_IO_CREDS_USR }}
  # NEXUS_IO_CREDS_USR: ${{ vars.NEXUS_IO_CREDS_USR }}
  # Used to verify the image signature and attestation
  COSIGN_PUBLIC_KEY: ${{ vars.COSIGN_PUBLIC_KEY }}
  # Custom Root CA to be used in scripts as trusted
  CUSTOM_ROOT_CA: ${{ vars.CUSTOM_ROOT_CA }}
  # Secrets
  ROX_API_TOKEN: ${{ secrets.ROX_API_TOKEN }}
  GITOPS_AUTH_PASSWORD: ${{ secrets.GITOPS_AUTH_PASSWORD }}
  # Set this password for your specific registry
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}
  # QUAY_IO_CREDS_PSW: ${{ secrets.QUAY_IO_CREDS_PSW }}
  # ARTIFACTORY_IO_CREDS_PSW: ${{ secrets.ARTIFACTORY_IO_CREDS_PSW }}
  # NEXUS_IO_CREDS_PSW: ${{ secrets.NEXUS_IO_CREDS_PSW }}
  COSIGN_SECRET_PASSWORD: ${{ secrets.COSIGN_SECRET_PASSWORD }}
  COSIGN_SECRET_KEY: ${{ secrets.COSIGN_SECRET_KEY }}

  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ${{ secrets.IMAGE_REGISTRY }}

  # 🖊️ EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: ""
  IMAGE_TAG: ""
  DEFAULT_UPDATE_VIA_PUSH: "true"
  # 🖊️ EDIT to set a name for your OpenShift app, or a default one will be generated below.
  APP_NAME: ""
on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  tssc-ci-cd:
    name: Build and send Image Update PR
    runs-on: ubuntu-24.04
    container:
      image: quay.io/redhat-appstudio/rhtap-task-runner:latest
      options: --privileged
    environment: production

    steps:
      - name: Check for required secrets
        uses: actions/github-script@v7
        with:
          script: |
            const vars = {
              IMAGE_REGISTRY: `${{ vars.IMAGE_REGISTRY }}`,

              ROX_CENTRAL_ENDPOINT: `${{ vars.ROX_CENTRAL_ENDPOINT }}`,
              /* GITOPS_AUTH_USERNAME: `${{ vars.GITOPS_AUTH_USERNAME }}`, */
              /* Set this to the user for your specific registry */
              IMAGE_REGISTRY_USER: `${{ vars.IMAGE_REGISTRY_USER }}`,
              /* Set this only when using an external Rekor instance */
              REKOR_HOST: `${{ vars.REKOR_HOST }}`,
              /* Set this only when using an external TUF instance */
              TUF_MIRROR: `${{ vars.TUF_MIRROR }}`,
              /* QUAY_IO_CREDS_USR: `${{ vars.QUAY_IO_CREDS_USR }}`, */
              /* ARTIFACTORY_IO_CREDS_USR: `${{ vars.ARTIFACTORY_IO_CREDS_USR }}`, */
              /* NEXUS_IO_CREDS_USR: `${{ vars.NEXUS_IO_CREDS_USR }}`, */
              /* Used to verify the image signature and attestation */
              COSIGN_PUBLIC_KEY: `${{ vars.COSIGN_PUBLIC_KEY }}`,
            };

            const missingVars = Object.entries(vars).filter(([ name, value ]) => {
              if (value.length === 0) {
                core.error(`Variable "${name}" is not set`);
                return true;
              }
              core.info(`✔️ Variable "${name}" is set`);
              return false;
            });

            const secrets = {

             ROX_API_TOKEN: `${{ secrets.ROX_API_TOKEN }}`,
             GITOPS_AUTH_PASSWORD: `${{ secrets.GITOPS_AUTH_PASSWORD }}`,
             /* Set this password for your specific registry */
             IMAGE_REGISTRY_PASSWORD: `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`,
             /* QUAY_IO_CREDS_PSW: `${{ secrets.QUAY_IO_CREDS_PSW }}`, */
             /* ARTIFACTORY_IO_CREDS_PSW: `${{ secrets.ARTIFACTORY_IO_CREDS_PSW }}`, */
             /* NEXUS_IO_CREDS_PSW: `${{ secrets.NEXUS_IO_CREDS_PSW }}`, */
             COSIGN_SECRET_PASSWORD: `${{ secrets.COSIGN_SECRET_PASSWORD }}`,
             COSIGN_SECRET_KEY: `${{ secrets.COSIGN_SECRET_KEY }}`,
            };

            const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
              if (value.length === 0) {
                core.error(`Secret "${name}" is not set`);
                return true;
              }
              core.info(`✔️ Secret "${name}" is set`);
              return false;
            });

            if (missingVars.length > 0) {
              core.error(`❌ At least one required variable is not set in the repository. \n` +
                "You can add it using:\n" +
                "GitHub UI: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#creating-configuration-variables-for-a-repository \n" +
                "GitHub CLI: https://cli.github.com/manual/gh_variable_set \n" +
                "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
            }

            if (missingSecrets.length > 0) {
              core.error(`❌ At least one required secret is not set in the repository. \n` +
                "You can add it using:\n" +
                "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
                "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
                "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
            }

            if (missingVars.length > 0 || missingSecrets.length > 0) {
              core.setFailed()
            } else {
              core.info(`✅ All the required variables and secrets are set`);
            }
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '2'
      - name: Pre-init
        run: |
          buildah --version
          syft --version
          cosign version
          ec version
          git config --global --add safe.directory $(pwd)
          cat rhtap/env.sh
      - name: Init
        run: |
          echo "• init"
          bash /work/rhtap/init.sh
      - name: Build
        run: |
          echo "• buildah-rhtap"
          bash /work/rhtap/buildah-rhtap.sh
          echo "• cosign-sign-attest"
          bash /work/rhtap/cosign-sign-attest.sh
      - name: Deploy
        run: |
          echo "• update-deployment"
          bash /work/rhtap/update-deployment.sh
      - name: Scan
        run: |
          echo "• acs-deploy-check"
          bash /work/rhtap/acs-deploy-check.sh
          echo "• acs-image-check"
          bash /work/rhtap/acs-image-check.sh
          echo "• acs-image-scan"
          bash /work/rhtap/acs-image-scan.sh
      - name: Summary
        run: |
          echo "• show-sbom-rhdh"
          bash /work/rhtap/show-sbom-rhdh.sh
          echo "• summary"
          bash /work/rhtap/summary.sh
      - name: Done
        run: |
          echo "Done"
